/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as AppImport } from './routes/_app'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthProfileImport } from './routes/_auth/profile'
import { Route as AuthFormImport } from './routes/_auth/form'
import { Route as AppAboutImport } from './routes/_app/about'
import { Route as AuthUsersIndexImport } from './routes/_auth/users/index'
import { Route as AuthGroupsIndexImport } from './routes/_auth/groups/index'
import { Route as AuthUsersUserIdImport } from './routes/_auth/users/$userId'
import { Route as AuthGroupsGroupIdImport } from './routes/_auth/groups/$groupId'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)

const AuthFormRoute = AuthFormImport.update({
  path: '/form',
  getParentRoute: () => AuthRoute,
} as any)

const AppAboutRoute = AppAboutImport.update({
  path: '/about',
  getParentRoute: () => AppRoute,
} as any)

const AuthUsersIndexRoute = AuthUsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthGroupsIndexRoute = AuthGroupsIndexImport.update({
  path: '/groups/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthUsersUserIdRoute = AuthUsersUserIdImport.update({
  path: '/users/$userId',
  getParentRoute: () => AuthRoute,
} as any)

const AuthGroupsGroupIdRoute = AuthGroupsGroupIdImport.update({
  path: '/groups/$groupId',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_app/about': {
      id: '/_app/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AppAboutImport
      parentRoute: typeof AppImport
    }
    '/_auth/form': {
      id: '/_auth/form'
      path: '/form'
      fullPath: '/form'
      preLoaderRoute: typeof AuthFormImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/groups/$groupId': {
      id: '/_auth/groups/$groupId'
      path: '/groups/$groupId'
      fullPath: '/groups/$groupId'
      preLoaderRoute: typeof AuthGroupsGroupIdImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users/$userId': {
      id: '/_auth/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthUsersUserIdImport
      parentRoute: typeof AuthImport
    }
    '/_auth/groups/': {
      id: '/_auth/groups/'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof AuthGroupsIndexImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users/': {
      id: '/_auth/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthUsersIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  AppRoute: AppRoute.addChildren({ AppAboutRoute }),
  AuthRoute: AuthRoute.addChildren({
    AuthFormRoute,
    AuthProfileRoute,
    AuthIndexRoute,
    AuthGroupsGroupIdRoute,
    AuthUsersUserIdRoute,
    AuthGroupsIndexRoute,
    AuthUsersIndexRoute,
  }),
  LoginRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/_auth",
        "/login"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/about"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/form",
        "/_auth/profile",
        "/_auth/",
        "/_auth/groups/$groupId",
        "/_auth/users/$userId",
        "/_auth/groups/",
        "/_auth/users/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_app/about": {
      "filePath": "_app/about.tsx",
      "parent": "/_app"
    },
    "/_auth/form": {
      "filePath": "_auth/form.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth/profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/groups/$groupId": {
      "filePath": "_auth/groups/$groupId.tsx",
      "parent": "/_auth"
    },
    "/_auth/users/$userId": {
      "filePath": "_auth/users/$userId.tsx",
      "parent": "/_auth"
    },
    "/_auth/groups/": {
      "filePath": "_auth/groups/index.tsx",
      "parent": "/_auth"
    },
    "/_auth/users/": {
      "filePath": "_auth/users/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
